/**
 * Copyright (C) 2022 Jan Nowotsch
 * Author Jan Nowotsch	<jan.nowotsch@gmail.com>
 *
 * Released under the terms of the GNU GPL v2.0
 */



#include <config/config.h>


porta = {
	compatible = "avr,gpio";

	/* gpio hardware (dt_data_t) */
	baseaddr = 0x20;	// porta

	reg = [
		0x68,			// PCICR
		0x6b,			// PCMSK0
	];

	int<8> = [ 0xf0 ];	// pull-up mask

	switches = {
		compatible = "gpio,port";

		/* gpio config (gpio_cfg_t) */
		int<CONFIG_GPIO_INT_WIDTH> = [
			1,				// mode (normal)
			0xf0,			// pin mask
			0xf0,			// in mask
			0x00,			// out mask
			0xf0,			// int mask
			0xf0,			// invert mask (inverted)
			4,				// interrupt
		];
	};

	adc = {
		compatible = "gpio,port";

		/* gpio config (gpio_cfg_t) */
		int<CONFIG_GPIO_INT_WIDTH> = [
			1,				// mode (normal)
			0x0f,			// pin mask
			0x0f,			// in mask
			0x00,			// out mask
			0x00,			// int mask
			0x00,			// invert mask (inverted)
			0,				// interrupt
		];
	};
};

portb = {
	compatible = "avr,gpio";

	/* gpio hardware (dt_data_t) */
	baseaddr = 0x23;	// portb

	reg = [
		0x68,			// PCICR
		0x6c,			// PCMSK1
	];

	int<8> = [ 0x01 ];	// pull-up mask

	uled = {
		compatible = "gpio,pin";

		/* gpio config (gpio_cfg_t) */
		int<CONFIG_GPIO_INT_WIDTH> = [
			1,				// mode (normal)
			0x01,			// pin mask
			0x00,			// in mask
			0x01,			// out mask
			0x00,			// int mask
			0x01,			// invert mask (inverted)
			0,				// interrupt
		];
	};

#ifdef CONFIG_KERNEL_HEARTBEAT
# define HEARTBEAT_PIN_MASK	0x2
# define HEARTBEAT_INVERT	1
# include "../common/heartbeat.dts"
#endif // CONFIG_KERNEL_HEARTBEAT
};


portc = {
	compatible = "avr,gpio";

	/* gpio hardware (dt_data_t) */
	baseaddr = 0x26;	// portc

	reg = [
		0x68,			// PCICR
		0x6d,			// PCMSK2
	];

	int<8> = [ 0xc0 ];	// pull-up mask

	int0 = {
		compatible = "gpio,port";

		/* gpio config (gpio_cfg_t) */
		int<CONFIG_GPIO_INT_WIDTH> = [
			1,				// mode (normal)
			0xc0,			// pin mask
			0xc0,			// in mask
			0xc0,			// out mask
			0xc0,			// int mask
			0xc0,			// invert mask (inverted)
			6,				// interrupt (pcint2)
		];
	};
};
