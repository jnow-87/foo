#
# MCU
#
# {{{
choice
	prompt "Target MCU"
		
	config ATMEGA1284P
		bool "Atmega1284P"
		select ADDR_WIDTH_8
		select AVR_ISA_AVR51
		select AVR_ATMEGA

	config ATMEGA88PA
		bool "Atmega88PA"
		select ADDR_WIDTH_8
		select AVR_ISA_AVR4
		select AVR_ATMEGA
endchoice

menu "Hidden"
	visible if 0

	config AVR_MCU
		string "MCU"
		default "atmega1284p" if ATMEGA1284P
		default "atmega88pa" if ATMEGA88PA
		default "unknown MCU"

	config AVR_ISA_AVR4
		bool "AVR4"

	config AVR_ISA_AVR51
		bool "AVR51"

	config AVR_ISA
		string "ISA"
		default "avr4" if AVR_ISA_AVR4
		default "avr51" if AVR_ISA_AVR51

	config AVR_ATMEGA
		bool "Atmega MCU"
		default n

	config AVR_XMEGA
		bool "Xmega MCU"
		default n

	# architecture defining header
	config ARCH_HEADER
		string "Arch Header"
		default "<arch/$(CONFIG_ARCH)/atmega.h>" if AVR
endmenu
# }}}

#
# memory configuration
#
# {{{
menu "Memory configuration"
	menu "Flash"
	config KERNEL_TEXT_BASE
		hex "Kernel binary base address"
		range 0x0 0x0fffffff
		default 0x0
		help
			Flash address to map the kernel image .text section to.

			Note: Flash addresses given in the datasheet are word addresses, i.e. they
				  need to be multiplied by 2 to get byte addresses.

	config KERNEL_TEXT_SIZE
		int "Kernel binary size (max)"
		default 0
		help
			Size of the kernel flash.

			Note: The kernel .data section needs to be mapped to the flash memory also.
				  Hence the kernel flash section needs to be large enough to hold both
				  the kernel's .text and .data sections.

	config APP_TEXT_BASE
		hex "Application binary base address"
		range 0x0 0x0fffffff
		default 0x0
		help
			Flash address to map the init application image .text section to.

			Note: Flash addresses given in the datasheet are word addresses, i.e. they
				  need to be multiplied by 2 to get byte addresses.

	config APP_TEXT_SIZE
		int "Application binary size (max)"
		default 0
		help
			Size of the init application .text section.

			Note: The init application .data section needs to be mapped to the flash
				  memory also. Hence the init applications flash section needs to be
				  large enough to hold both the .text and .data sections.
	endmenu

	menu "SRAM"
	config KERNEL_DATA_BASE
		hex "Kernel binary .data section base address"
		range 0x0 0x0fffffff
		default 0x0
		help
			SRAM address to map the kernel .data section to.

			Note: The .data section is part of the kernel image. As such it is programmed
				  to flash memory and loaded to SRAM at runtime. This address constitutes
				  the SRAM address.

			Note: gcc applies an offset of 0x00800000 to SRAM address in order to
				  distinguish them from flash addresses. This offset needs to be part of
				  this address.

	config KERNEL_DATA_SIZE
		int "Kernel binary .data section size"
		default 0
		help
			Size of the kernel .data section.

	config APP_DATA_BASE
		hex "Application binary .data section base address"
		range 0x0 0x0fffffff
		default 0x0
		help
			SRAM address to map the init application .data section to.

			Note: The .data section is part of the init application. As such it is
				  programmed to flash memory and loaded to SRAM at runtime. This address
				  constitutes the SRAM address.

			Note: gcc applies an offset of 0x00800000 to SRAM address in order to
				  distinguish them from flash addresses. This offset needs to be part of
				  this address.

	config APP_DATA_SIZE
		int "Application binary .data section size (max)"
		default 0
		help
			Size of the init application .data section.

	config MREG_BASE
		hex "Memory mapped register space base address"
		range 0x0 0x0fffffff
		default 0x0
		help
			SRAM address of memory mapped register space.

	config MREG_SIZE
		int "Memory mapped register space size"
		default 0
		help
			Size of the memory mapped register space.
	endmenu
endmenu
# }}}

#
# scheduler
#
# {{{
choice
	prompt "Scheduler interrupt"

	config SCHED_INT_WATCHDOG
		bool "WATCHDOG"
endchoice

menu "Hidden"
	visible if 0

	config SCHED_INT
		string "Scheduler interrupt"
		default "INT_WATCHDOG"	if	SCHED_INT_WATCHDOG
endmenu

choice
	prompt "Watchdog prescaler"

	config WATCHDOG_PRESCALE_2k
		bool "2k cycles"

	config WATCHDOG_PRESCALE_4k
		bool "4k cycles"

	config WATCHDOG_PRESCALE_8k
		bool "8k cycles"

	config WATCHDOG_PRESCALE_16k
		bool "16k cycles"

	config WATCHDOG_PRESCALE_32k
		bool "32k cycles"

	config WATCHDOG_PRESCALE_64k
		bool "64k cycles"

	config WATCHDOG_PRESCALE_128k
		bool "128k cycles"

	config WATCHDOG_PRESCALE_256k
		bool "256k cycles"

	config WATCHDOG_PRESCALE_512k
		bool "512k cycles"

	config WATCHDOG_PRESCALE_1M
		bool "1M cycles"
endchoice
# }}}

#
# syscall
#
# {{{
menu "Syscall configuration"
choice
	prompt "Pin change interrupt"

	config SC_PCINT0
		bool "PCINT0"

	config SC_PCINT1
		bool "PCINT1"

	config SC_PCINT2
		bool "PCINT2"

	config SC_PCINT3
		bool "PCINT3"

	config SC_PCINT4
		bool "PCINT4"

	config SC_PCINT5
		bool "PCINT5"

	config SC_PCINT6
		bool "PCINT6"

	config SC_PCINT7
		bool "PCINT7"

	config SC_PCINT8
		bool "PCINT8"

	config SC_PCINT9
		bool "PCINT9"

	config SC_PCINT10
		bool "PCINT10"

	config SC_PCINT11
		bool "PCINT11"

	config SC_PCINT12
		bool "PCINT12"

	config SC_PCINT13
		bool "PCINT13"

	config SC_PCINT14
		bool "PCINT14"

	config SC_PCINT15
		bool "PCINT15"

	config SC_PCINT16
		bool "PCINT16"

	config SC_PCINT17
		bool "PCINT17"

	config SC_PCINT18
		bool "PCINT18"

	config SC_PCINT19
		bool "PCINT19"

	config SC_PCINT20
		bool "PCINT20"

	config SC_PCINT21
		bool "PCINT21"

	config SC_PCINT22
		bool "PCINT22"

	config SC_PCINT23
		bool "PCINT23"

	config SC_PCINT24
		bool "PCINT24"

	config SC_PCINT25
		bool "PCINT25"

	config SC_PCINT26
		bool "PCINT26"

	config SC_PCINT27
		bool "PCINT27"

	config SC_PCINT28
		bool "PCINT28"
		
	config SC_PCINT29
		bool "PCINT29"

	config SC_PCINT30
		bool "PCINT30"

	config SC_PCINT31
		bool "PCINT31"
endchoice

choice
	prompt "Associated DDR"

	config SC_DDRA
		bool "DDRA"

	config SC_DDRB
		bool "DDRB"

	config SC_DDRC
		bool "DDRC"

	config SC_DDRD
		bool "DDRD"
endchoice

config SC_PIN_BIT
	int "I/O port bit"
	range 0 7
endmenu

menu "Hidden"
	visible if 0

	config SC_DDR
		string "SYSCALL_DDR"

		default "DDRA" if SC_DDRA
		default "DDRB" if SC_DDRB
		default "DDRC" if SC_DDRC
		default "DDRD" if SC_DDRD

	config SC_PIN
		string "SYSCALL_PIN"

		default "PINA" if SC_DDRA
		default "PINB" if SC_DDRB
		default "PINC" if SC_DDRC
		default "PIND" if SC_DDRD

	config SC_PCINT
		int "Pin change interrupt"

		default 0 if SC_PCINT0
		default 1 if SC_PCINT1
		default 2 if SC_PCINT2
		default 3 if SC_PCINT3
		default 4 if SC_PCINT4
		default 5 if SC_PCINT5
		default 6 if SC_PCINT6
		default 7 if SC_PCINT7
		default 8 if SC_PCINT8
		default 9 if SC_PCINT9
		default 10 if SC_PCINT10
		default 11 if SC_PCINT11
		default 12 if SC_PCINT12
		default 13 if SC_PCINT13
		default 14 if SC_PCINT14
		default 15 if SC_PCINT15
		default 16 if SC_PCINT16
		default 17 if SC_PCINT17
		default 18 if SC_PCINT18
		default 19 if SC_PCINT19
		default 20 if SC_PCINT20
		default 21 if SC_PCINT21
		default 22 if SC_PCINT22
		default 23 if SC_PCINT23
		default 24 if SC_PCINT24
		default 25 if SC_PCINT25
		default 26 if SC_PCINT26
		default 27 if SC_PCINT27
		default 28 if SC_PCINT28
		default 29 if SC_PCINT29
		default 30 if SC_PCINT30
		default 31 if SC_PCINT31

	config SC_PCMSK
		string "PCMSK register"

		default "PCMSK0" if SC_PCINT0 || SC_PCINT1 || SC_PCINT2 || SC_PCINT3 || SC_PCINT4 || SC_PCINT5 || SC_PCINT6 || SC_PCINT7
		default "PCMSK1" if SC_PCINT8 || SC_PCINT9 || SC_PCINT10 || SC_PCINT11 || SC_PCINT12 || SC_PCINT13 || SC_PCINT14 || SC_PCINT15
		default "PCMSK2" if SC_PCINT16 || SC_PCINT17 || SC_PCINT18 || SC_PCINT19 || SC_PCINT20 || SC_PCINT21 || SC_PCINT22 || SC_PCINT23
		default "PCMSK3" if SC_PCINT24 || SC_PCINT25 || SC_PCINT26 || SC_PCINT27 || SC_PCINT28 || SC_PCINT29 || SC_PCINT30 || SC_PCINT31

	config SC_PCICR_IE
		int "PCICR interrupt enable bit"

		default 0 if SC_PCINT0 || SC_PCINT1 || SC_PCINT2 || SC_PCINT3 || SC_PCINT4 || SC_PCINT5 || SC_PCINT6 || SC_PCINT7
		default 1 if SC_PCINT8 || SC_PCINT9 || SC_PCINT10 || SC_PCINT11 || SC_PCINT12 || SC_PCINT13 || SC_PCINT14 || SC_PCINT15
		default 2 if SC_PCINT16 || SC_PCINT17 || SC_PCINT18 || SC_PCINT19 || SC_PCINT20 || SC_PCINT21 || SC_PCINT22 || SC_PCINT23
		default 3 if SC_PCINT24 || SC_PCINT25 || SC_PCINT26 || SC_PCINT27 || SC_PCINT28 || SC_PCINT29 || SC_PCINT30 || SC_PCINT31

	config SC_PCIFR_FLAG
		int "PCIFR interrupt flag bit"

		default 0 if SC_PCINT0 || SC_PCINT1 || SC_PCINT2 || SC_PCINT3 || SC_PCINT4 || SC_PCINT5 || SC_PCINT6 || SC_PCINT7
		default 1 if SC_PCINT8 || SC_PCINT9 || SC_PCINT10 || SC_PCINT11 || SC_PCINT12 || SC_PCINT13 || SC_PCINT14 || SC_PCINT15
		default 2 if SC_PCINT16 || SC_PCINT17 || SC_PCINT18 || SC_PCINT19 || SC_PCINT20 || SC_PCINT21 || SC_PCINT22 || SC_PCINT23
		default 3 if SC_PCINT24 || SC_PCINT25 || SC_PCINT26 || SC_PCINT27 || SC_PCINT28 || SC_PCINT29 || SC_PCINT30 || SC_PCINT31

	config SC_INT
		string "Syscall interrupt"

		default "INT_PCINT0" if SC_PCINT0 || SC_PCINT1 || SC_PCINT2 || SC_PCINT3 || SC_PCINT4 || SC_PCINT5 || SC_PCINT6 || SC_PCINT7
		default "INT_PCINT1" if SC_PCINT8 || SC_PCINT9 || SC_PCINT10 || SC_PCINT11 || SC_PCINT12 || SC_PCINT13 || SC_PCINT14 || SC_PCINT15
		default "INT_PCINT2" if SC_PCINT16 || SC_PCINT17 || SC_PCINT18 || SC_PCINT19 || SC_PCINT20 || SC_PCINT21 || SC_PCINT22 || SC_PCINT23
		default "INT_PCINT3" if SC_PCINT24 || SC_PCINT25 || SC_PCINT26 || SC_PCINT27 || SC_PCINT28 || SC_PCINT29 || SC_PCINT30 || SC_PCINT31
endmenu
# }}}

#
# sleep modes
#
# {{{
choice
	prompt "Sleep mode"

	config SLEEPMODE_IDLE
		bool "idle"

	config SLEEPMODE_ADCNR
		bool "adc noice reduction"

	config SLEEPMODE_PWRDWN
		bool "power down"

	config SLEEPMODE_PWRSAVE
		bool "power save"

	config SLEEPMODE_STANDBY
		bool "standby"

	config SLEEPMODE_EXTSTANDBY
		bool "extended standby"
endchoice
# }}}
