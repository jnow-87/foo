#
# MCU
#
# {{{
choice
	prompt "Target MCU"
		
	config ATMEGA1284P
		bool "Atmega1284P"
		select ADDR_WIDTH_8
		select AVR_ISA_AVR51
		select AVR_ATMEGA

	config ATMEGA88PA
		bool "Atmega88PA"
		select ADDR_WIDTH_8
		select AVR_ISA_AVR4
		select AVR_ATMEGA
endchoice

menu "Hidden"
	visible if 0

	config AVR_MCU
		string "MCU"
		default "atmega1284p" if ATMEGA1284P
		default "atmega88pa" if ATMEGA88PA
		default "unknown MCU"

	config AVR_ISA_AVR4
		bool "AVR4"

	config AVR_ISA_AVR51
		bool "AVR51"

	config AVR_ISA
		string "ISA"
		default "avr4" if AVR_ISA_AVR4
		default "avr51" if AVR_ISA_AVR51

	config AVR_ATMEGA
		bool "Atmega MCU"
		default n

	config AVR_XMEGA
		bool "Xmega MCU"
		default n

	# architecture defining header
	config ARCH_HEADER
		string "Arch Header"
		default "<arch/$(CONFIG_ARCH)/atmega.h>" if AVR
endmenu
# }}}

#
# memory configuration
#
# {{{
menu "Memory configuration"
config KERNEL_TEXT_BASE
	hex "Kernel flash base address"
	range 0x0 0x0fffffff
	default 0x0
	help
		Flash address to map the kernel image .text section to.

		Note: Flash addresses given in the datasheet are word addresses, i.e. they
		      need to be multiplied by 2 to get byte addresses.

config KERNEL_TEXT_SIZE
	int "Kernel flash size"
	default 0
	help
		Size of the kernel flash.

		Note: The kernel .data section needs to be mapped to the flash memory also.
		      Hence the kernel flash section needs to be large enough to hold both
		      the kernel's .text and .data sections.

config KERNEL_DATA_BASE
	hex "Kernel .data section base address"
	range 0x0 0x0fffffff
	default 0x0
	help
		SRAM address to map the kernel .data section to.

		Note: The .data section is part of the kernel image. As such it is programmed
		      to flash memory and loaded to SRAM at runtime. This address constitutes
		      the SRAM address.

		Note: gcc applies an offset of 0x00800000 to SRAM address in order to
		      distinguish them from flash addresses. This offset needs to be part of
		      this address.

config KERNEL_DATA_SIZE
	int "Kernel .data section size"
	default 0
	help
		Size of the kernel .data section.

config APP_TEXT_BASE
	hex "Application flash base address"
	range 0x0 0x0fffffff
	default 0x0
	help
		Flash address to map the init application image .text section to.

		Note: Flash addresses given in the datasheet are word addresses, i.e. they
		      need to be multiplied by 2 to get byte addresses.

config APP_TEXT_SIZE
	int "Max. application .text section size"
	default 0
	help
		Size of the init application .text section.

		Note: The init application .data section needs to be mapped to the flash
		      memory also. Hence the init applications flash section needs to be
		      large enough to hold both the .text and .data sections.

config APP_DATA_BASE
	hex "Application .data section base address"
	range 0x0 0x0fffffff
	default 0x0
	help
		SRAM address to map the init application .data section to.

		Note: The .data section is part of the init application. As such it is
		      programmed to flash memory and loaded to SRAM at runtime. This address
		      constitutes the SRAM address.

		Note: gcc applies an offset of 0x00800000 to SRAM address in order to
		      distinguish them from flash addresses. This offset needs to be part of
		      this address.

config APP_DATA_SIZE
	int "Max. application .data section size"
	default 0
	help
		Size of the init application .data section.

config MREG_BASE
	hex "Memory mapped register space base address"
	range 0x0 0x0fffffff
	default 0x0
	help
		SRAM address of memory mapped register space.

config MREG_SIZE
	int "Memory mapped register space size"
	default 0
	help
		Size of the memory mapped register space.
endmenu
# }}}

#
# scheduler
#
# {{{
config SCHED_INT
	string "Scheduler interrupt"
	default ""

choice
	prompt "Watchdog prescaler"

	config AVR_WATCHDOG_PRESCALE_2k
		bool "2k cycles"

	config AVR_WATCHDOG_PRESCALE_4k
		bool "4k cycles"

	config AVR_WATCHDOG_PRESCALE_8k
		bool "8k cycles"

	config AVR_WATCHDOG_PRESCALE_16k
		bool "16k cycles"

	config AVR_WATCHDOG_PRESCALE_32k
		bool "32k cycles"

	config AVR_WATCHDOG_PRESCALE_64k
		bool "64k cycles"

	config AVR_WATCHDOG_PRESCALE_128k
		bool "128k cycles"

	config AVR_WATCHDOG_PRESCALE_256k
		bool "256k cycles"

	config AVR_WATCHDOG_PRESCALE_512k
		bool "512k cycles"

	config AVR_WATCHDOG_PRESCALE_1M
		bool "1M cycles"
endchoice
# }}}

#
# syscall
#
# {{{
menu "Syscall configuration"
choice
	prompt "Pin change interrupt"

	config AVR_SYSCALL_PCINT0
		bool "PCINT0"

	config AVR_SYSCALL_PCINT1
		bool "PCINT1"

	config AVR_SYSCALL_PCINT2
		bool "PCINT2"

	config AVR_SYSCALL_PCINT3
		bool "PCINT3"

	config AVR_SYSCALL_PCINT4
		bool "PCINT4"

	config AVR_SYSCALL_PCINT5
		bool "PCINT5"

	config AVR_SYSCALL_PCINT6
		bool "PCINT6"

	config AVR_SYSCALL_PCINT7
		bool "PCINT7"

	config AVR_SYSCALL_PCINT8
		bool "PCINT8"

	config AVR_SYSCALL_PCINT9
		bool "PCINT9"

	config AVR_SYSCALL_PCINT10
		bool "PCINT10"

	config AVR_SYSCALL_PCINT11
		bool "PCINT11"

	config AVR_SYSCALL_PCINT12
		bool "PCINT12"

	config AVR_SYSCALL_PCINT13
		bool "PCINT13"

	config AVR_SYSCALL_PCINT14
		bool "PCINT14"

	config AVR_SYSCALL_PCINT15
		bool "PCINT15"

	config AVR_SYSCALL_PCINT16
		bool "PCINT16"

	config AVR_SYSCALL_PCINT17
		bool "PCINT17"

	config AVR_SYSCALL_PCINT18
		bool "PCINT18"

	config AVR_SYSCALL_PCINT19
		bool "PCINT19"

	config AVR_SYSCALL_PCINT20
		bool "PCINT20"

	config AVR_SYSCALL_PCINT21
		bool "PCINT21"

	config AVR_SYSCALL_PCINT22
		bool "PCINT22"

	config AVR_SYSCALL_PCINT23
		bool "PCINT23"

	config AVR_SYSCALL_PCINT24
		bool "PCINT24"

	config AVR_SYSCALL_PCINT25
		bool "PCINT25"

	config AVR_SYSCALL_PCINT26
		bool "PCINT26"

	config AVR_SYSCALL_PCINT27
		bool "PCINT27"

	config AVR_SYSCALL_PCINT28
		bool "PCINT28"
		
	config AVR_SYSCALL_PCINT29
		bool "PCINT29"

	config AVR_SYSCALL_PCINT30
		bool "PCINT30"

	config AVR_SYSCALL_PCINT31
		bool "PCINT31"
endchoice

choice
	prompt "Associated DDR"

	config AVR_SYSCALL_DDRA
		bool "DDRA"

	config AVR_SYSCALL_DDRB
		bool "DDRB"

	config AVR_SYSCALL_DDRC
		bool "DDRC"

	config AVR_SYSCALL_DDRD
		bool "DDRD"
endchoice

config AVR_SYSCALL_PIN_BIT
	int "I/O port bit"
	range 0 7
endmenu

menu "Hidden"
	visible if 0

	config AVR_SYSCALL_DDR
		string "SYSCALL_DDR"

		default "DDRA" if AVR_SYSCALL_DDRA
		default "DDRB" if AVR_SYSCALL_DDRB
		default "DDRC" if AVR_SYSCALL_DDRC
		default "DDRD" if AVR_SYSCALL_DDRD

	config AVR_SYSCALL_PIN
		string "SYSCALL_PIN"

		default "PINA" if AVR_SYSCALL_DDRA
		default "PINB" if AVR_SYSCALL_DDRB
		default "PINC" if AVR_SYSCALL_DDRC
		default "PIND" if AVR_SYSCALL_DDRD

	config AVR_SYSCALL_PCINT
		int "Pin change interrupt"

		default 0 if AVR_SYSCALL_PCINT0
		default 1 if AVR_SYSCALL_PCINT1
		default 2 if AVR_SYSCALL_PCINT2
		default 3 if AVR_SYSCALL_PCINT3
		default 4 if AVR_SYSCALL_PCINT4
		default 5 if AVR_SYSCALL_PCINT5
		default 6 if AVR_SYSCALL_PCINT6
		default 7 if AVR_SYSCALL_PCINT7
		default 8 if AVR_SYSCALL_PCINT8
		default 9 if AVR_SYSCALL_PCINT9
		default 10 if AVR_SYSCALL_PCINT10
		default 11 if AVR_SYSCALL_PCINT11
		default 12 if AVR_SYSCALL_PCINT12
		default 13 if AVR_SYSCALL_PCINT13
		default 14 if AVR_SYSCALL_PCINT14
		default 15 if AVR_SYSCALL_PCINT15
		default 16 if AVR_SYSCALL_PCINT16
		default 17 if AVR_SYSCALL_PCINT17
		default 18 if AVR_SYSCALL_PCINT18
		default 19 if AVR_SYSCALL_PCINT19
		default 20 if AVR_SYSCALL_PCINT20
		default 21 if AVR_SYSCALL_PCINT21
		default 22 if AVR_SYSCALL_PCINT22
		default 23 if AVR_SYSCALL_PCINT23
		default 24 if AVR_SYSCALL_PCINT24
		default 25 if AVR_SYSCALL_PCINT25
		default 26 if AVR_SYSCALL_PCINT26
		default 27 if AVR_SYSCALL_PCINT27
		default 28 if AVR_SYSCALL_PCINT28
		default 29 if AVR_SYSCALL_PCINT29
		default 30 if AVR_SYSCALL_PCINT30
		default 31 if AVR_SYSCALL_PCINT31

	config AVR_SYSCALL_PCMSK
		string "PCMSK register"

		default "PCMSK0" if AVR_SYSCALL_PCINT0 || AVR_SYSCALL_PCINT1 || AVR_SYSCALL_PCINT2 || AVR_SYSCALL_PCINT3 || AVR_SYSCALL_PCINT4 || AVR_SYSCALL_PCINT5 || AVR_SYSCALL_PCINT6 || AVR_SYSCALL_PCINT7
		default "PCMSK1" if AVR_SYSCALL_PCINT8 || AVR_SYSCALL_PCINT9 || AVR_SYSCALL_PCINT10 || AVR_SYSCALL_PCINT11 || AVR_SYSCALL_PCINT12 || AVR_SYSCALL_PCINT13 || AVR_SYSCALL_PCINT14 || AVR_SYSCALL_PCINT15
		default "PCMSK2" if AVR_SYSCALL_PCINT16 || AVR_SYSCALL_PCINT17 || AVR_SYSCALL_PCINT18 || AVR_SYSCALL_PCINT19 || AVR_SYSCALL_PCINT20 || AVR_SYSCALL_PCINT21 || AVR_SYSCALL_PCINT22 || AVR_SYSCALL_PCINT23
		default "PCMSK3" if AVR_SYSCALL_PCINT24 || AVR_SYSCALL_PCINT25 || AVR_SYSCALL_PCINT26 || AVR_SYSCALL_PCINT27 || AVR_SYSCALL_PCINT28 || AVR_SYSCALL_PCINT29 || AVR_SYSCALL_PCINT30 || AVR_SYSCALL_PCINT31

	config AVR_SYSCALL_PCICR_IE
		int "PCICR interrupt enable bit"

		default 0 if AVR_SYSCALL_PCINT0 || AVR_SYSCALL_PCINT1 || AVR_SYSCALL_PCINT2 || AVR_SYSCALL_PCINT3 || AVR_SYSCALL_PCINT4 || AVR_SYSCALL_PCINT5 || AVR_SYSCALL_PCINT6 || AVR_SYSCALL_PCINT7
		default 1 if AVR_SYSCALL_PCINT8 || AVR_SYSCALL_PCINT9 || AVR_SYSCALL_PCINT10 || AVR_SYSCALL_PCINT11 || AVR_SYSCALL_PCINT12 || AVR_SYSCALL_PCINT13 || AVR_SYSCALL_PCINT14 || AVR_SYSCALL_PCINT15
		default 2 if AVR_SYSCALL_PCINT16 || AVR_SYSCALL_PCINT17 || AVR_SYSCALL_PCINT18 || AVR_SYSCALL_PCINT19 || AVR_SYSCALL_PCINT20 || AVR_SYSCALL_PCINT21 || AVR_SYSCALL_PCINT22 || AVR_SYSCALL_PCINT23
		default 3 if AVR_SYSCALL_PCINT24 || AVR_SYSCALL_PCINT25 || AVR_SYSCALL_PCINT26 || AVR_SYSCALL_PCINT27 || AVR_SYSCALL_PCINT28 || AVR_SYSCALL_PCINT29 || AVR_SYSCALL_PCINT30 || AVR_SYSCALL_PCINT31

	config AVR_SYSCALL_PCIFR_FLAG
		int "PCIFR interrupt flag bit"

		default 0 if AVR_SYSCALL_PCINT0 || AVR_SYSCALL_PCINT1 || AVR_SYSCALL_PCINT2 || AVR_SYSCALL_PCINT3 || AVR_SYSCALL_PCINT4 || AVR_SYSCALL_PCINT5 || AVR_SYSCALL_PCINT6 || AVR_SYSCALL_PCINT7
		default 1 if AVR_SYSCALL_PCINT8 || AVR_SYSCALL_PCINT9 || AVR_SYSCALL_PCINT10 || AVR_SYSCALL_PCINT11 || AVR_SYSCALL_PCINT12 || AVR_SYSCALL_PCINT13 || AVR_SYSCALL_PCINT14 || AVR_SYSCALL_PCINT15
		default 2 if AVR_SYSCALL_PCINT16 || AVR_SYSCALL_PCINT17 || AVR_SYSCALL_PCINT18 || AVR_SYSCALL_PCINT19 || AVR_SYSCALL_PCINT20 || AVR_SYSCALL_PCINT21 || AVR_SYSCALL_PCINT22 || AVR_SYSCALL_PCINT23
		default 3 if AVR_SYSCALL_PCINT24 || AVR_SYSCALL_PCINT25 || AVR_SYSCALL_PCINT26 || AVR_SYSCALL_PCINT27 || AVR_SYSCALL_PCINT28 || AVR_SYSCALL_PCINT29 || AVR_SYSCALL_PCINT30 || AVR_SYSCALL_PCINT31

	config AVR_SYSCALL_INT
		string "Syscall interrupt"

		default "INT_PCINT0" if AVR_SYSCALL_PCINT0 || AVR_SYSCALL_PCINT1 || AVR_SYSCALL_PCINT2 || AVR_SYSCALL_PCINT3 || AVR_SYSCALL_PCINT4 || AVR_SYSCALL_PCINT5 || AVR_SYSCALL_PCINT6 || AVR_SYSCALL_PCINT7
		default "INT_PCINT1" if AVR_SYSCALL_PCINT8 || AVR_SYSCALL_PCINT9 || AVR_SYSCALL_PCINT10 || AVR_SYSCALL_PCINT11 || AVR_SYSCALL_PCINT12 || AVR_SYSCALL_PCINT13 || AVR_SYSCALL_PCINT14 || AVR_SYSCALL_PCINT15
		default "INT_PCINT2" if AVR_SYSCALL_PCINT16 || AVR_SYSCALL_PCINT17 || AVR_SYSCALL_PCINT18 || AVR_SYSCALL_PCINT19 || AVR_SYSCALL_PCINT20 || AVR_SYSCALL_PCINT21 || AVR_SYSCALL_PCINT22 || AVR_SYSCALL_PCINT23
		default "INT_PCINT3" if AVR_SYSCALL_PCINT24 || AVR_SYSCALL_PCINT25 || AVR_SYSCALL_PCINT26 || AVR_SYSCALL_PCINT27 || AVR_SYSCALL_PCINT28 || AVR_SYSCALL_PCINT29 || AVR_SYSCALL_PCINT30 || AVR_SYSCALL_PCINT31
endmenu
# }}}

#
# sleep modes
#
# {{{
choice
	prompt "Sleep mode"

	config AVR_SLEEPMODE_IDLE
		bool "idle"

	config AVR_SLEEPMODE_ADCNR
		bool "adc noice reduction"

	config AVR_SLEEPMODE_PWRDWN
		bool "power down"

	config AVR_SLEEPMODE_PWRSAVE
		bool "power save"

	config AVR_SLEEPMODE_STANDBY
		bool "standby"

	config AVR_SLEEPMODE_EXTSTANDBY
		bool "extended standby"
endchoice
# }}}
